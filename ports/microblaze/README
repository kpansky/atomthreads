---------------------------------------------------------------------------

Library:      Atomthreads
Author:       Kevin Pansky <kevin.pansky@gmail.com>
Website:      http://atomthreads.com
License:      BSD Revised

---------------------------------------------------------------------------

MICROBLAZE PORT

This folder contains a port of the Atomthreads real time kernel for the
MicroBlaze processor architecture.

All of the cross-platform kernel code is contained in the top-level 
'kernel' folder, while ports to specific CPU architectures are contained in
the 'ports' folder tree. A port to a CPU architecture can comprise just one
or two modules which provide the architecture-specific functionality, such
as the context-switch routine which saves and restores processor registers
on a thread switch. In this case, the kernel port is split into two files:

 * atomport.c: Those functions which can be written in C
 * atomport-asm.s: The main register save/restore assembler routines

Each Atomthreads port requires also a header file which describes various
architecture-specific details such as appropriate types for 8-bit, 16-bit
etc variables, the port's system tick frequency, and macros for performing
interrupt lockouts / critical sections:

 * atomuser.h: Port-specific header required by the kernel for each port

A couple of additional source files are also included here:

 * tests-main.c: Main application file (used for launching automated tests)

Atomthreads includes a suite of automated tests which prove the key OS
functionality, and can be used with any architecture ports. This port
provides an easy mechanism for building, downloading and running the test
suite to prove the OS on your target.

The port was carried out and tested using the Xilinx generated Standalone 
BSP.  Platform and compiler specific code has been kept to an absolute 
minimum.


---------------------------------------------------------------------------

PREREQUISITES

Xilinx FPGA board
Xilinx ISE (WebPack edition works for the MicroBlaze MCS)

---------------------------------------------------------------------------

BUILDING THE SOURCE

MicroBlaze MCS:
Simply type make inside of the microblaze port directory.

MicroBlaze EDK:
Code was tested by adding required files to a Xilinx SDK project exported from the
Xilinx EDK.  Makefile for building on the commandline is TBD.


---------------------------------------------------------------------------

PROGRAMMING TO THE TARGET DEVICE

Programming the MicroBlaze with the object code is somewhat outside of the
scope of this document.  Relevant information can be found for the 
MicroBlaze MCS at http://www.xilinx.com/tools/mb_mcs.htm.

Alternatively, if you have built your MicroBlaze with the debug module
enabled and have a Xilinx supported JTAG cable, it is possible to use xmd 
as follows.

Shell 1:  xmd -opt support/xmd-test.cmd

Shell 2:  mb-gdb
  From here you can enter the following:
  'target remote :1234'
  'file <YOUR ELF HERE>'
  'load'
  'c'

---------------------------------------------------------------------------

RUNNING THE AUTOMATED TESTS

You must have xmd running and connected to the target (example above)

Then run 'mb-gdb --command=support/tests.cmd'


---------------------------------------------------------------------------

WRITING APPLICATIONS

The easiest way to start a new application which utilises the Atomthreads
scheduler is to base your main application startup on tests-main.c. This
initialises the OS, sets up a UART and calls out to the test module entry
functions. You can generally simply replace the call to the test modules by
a call to your own application startup code.


---------------------------------------------------------------------------

RAM FOOTPRINT & STACK USAGE

Currently total program size for the test suite with stack checking on is 
approximately 40-50kB with -O0 and 30-40kB with -0s.  This seems fairly 
large and there may be room for improvement in this regard.


---------------------------------------------------------------------------

